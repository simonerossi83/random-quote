{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["bgColors","quoteColors","quotes","text","author","getRand","vect","Math","floor","random","length","App","bgNum","React","useState","bgColor","setBgColor","document","getElementById","style","backgroundColor","quoteBoxColor","setquoteBoxColor","quoteNum","quote","setQuote","id","class","href","target","type","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oMAAe,I,YCKTA,EAAW,CAAC,YAAY,iBAAiB,YAAY,UAAU,QAAQ,UAAU,aACjFC,EAAc,CAAC,QAAS,YAAY,iBAAiB,UAAU,WAAW,WAAY,aACtFC,EAAS,CACb,CACAC,KAAM,+CACNC,OAAQ,gBAEN,CACED,KAAM,8EACNC,OAAO,eAEX,CACED,KAAM,oEACNC,OAAQ,cAEV,CACED,KAAM,4EACNC,OAAQ,uBAEV,CACED,KAAM,8DACNC,OAAQ,kBAEV,CACED,KAAM,mKACNC,OAAQ,iBAEV,CACED,KAAM,0CACNC,OAAQ,6BAGNC,EAAU,SAAAC,GAAI,OAAIC,KAAKC,MAAMD,KAAKE,SAASH,EAAKI,SAoCvCC,MAlCf,WAEE,IAAIC,EAAQP,EAAQL,GAFN,EAGgBa,IAAMC,SAASd,EAASY,IAHxC,mBAGPG,EAHO,KAGEC,EAHF,KAIdC,SAASC,eAAe,QAAQC,MAAMC,gBAAkBL,EAGtCV,EAAQJ,GAA1B,IAPc,EAQ4BY,IAAMC,SAASb,EAAYW,IARvD,mBAQPS,EARO,KAQQC,EARR,KAWVC,EAAWlB,EAAQH,GAXT,EAYYW,IAAMC,SAASZ,EAAOqB,IAZlC,mBAYPC,EAZO,KAYAC,EAZA,KAsBd,OACE,sBAAKC,GAAG,YAAYP,MAAO,CAACC,gBAAiBC,GAAgBM,MAAM,qCAAnE,UACA,wBAAOD,GAAG,OAAV,cACIF,EAAMrB,KADV,OAGA,oBAAGuB,GAAG,SAAN,UAAe,uBAAMF,EAAMpB,UAC5B,oBAAGsB,GAAG,cAAcE,KAAK,2BAA2BC,OAAO,SAA3D,UAAoE,mBAAGF,MAAM,mBAA7E,QAAwG,wBAAQD,GAAG,YAAYI,KAAK,SAASH,MAAM,gBAAgBI,QAb/I,WAClBf,EAAWhB,EAASK,EAAQL,KAC5BsB,EAAiBrB,EAAYI,EAAQJ,KACrCwB,EAASvB,EAAOG,EAAQH,MAU8E,2BCvD5F8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1B,SAASC,eAAe,SAM1Bc,K","file":"static/js/main.52ab6dda.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\n\n// This one has an implicit return\nconst bgColors = ['AliceBlue','CornflowerBlue','DarkGreen','DimGrey','Ivory','Crimson','PaleGreen' ];\nconst quoteColors = ['Azure', 'CadetBlue','DarkOliveGreen','DimGray','HoneyDew','Cornsilk', 'MintCream'];\nconst quotes = [\n  {\n  text: \"I do not fear computers. I fear lack of them\",\n  author: \"Isaac Asimov\"\n},\n    {\n      text: \"A computer once beat me at chess, but it was no match for me at kick boxing\",\n      author:\"Emo Philips\"\n    },\n  {\n    text: \"The computer was born to solve problems that did not exist before\",\n    author: \"Bill Gates\"\n  },\n  {\n    text: \"If people never did silly things, nothing intelligent would ever get done\",\n    author: \"Ludwig Wittgenstein\"\n  },\n  {\n    text: \"If you think your users are idiots, only idiots will use it\",\n    author: \"Linus Torvalds\"\n  },\n  {\n    text: \"Commenting your code is like cleaning your bathroom — you never want to do it, but it really does create a more pleasant experience for you and your guests\",\n    author: \"Ryan Campbell\"\n  },\n  {\n    text: \"Don’t document the problem, fix it\",\n    author: \"Atli Björgvin Oddsson\"\n  }];\n\nconst getRand = vect => Math.floor(Math.random()*vect.length);\n\nfunction App () {\n  //Inizializzo lo sfondo con un colore casuale\n  let bgNum = getRand(bgColors);\n  const [bgColor, setBgColor] = React.useState(bgColors[bgNum]);\n  document.getElementById(\"root\").style.backgroundColor = bgColor;\n  \n  //Inizializzo il colore del box con un colore casuale\n  let quoteBoxNum = getRand(quoteColors);\n  const [quoteBoxColor, setquoteBoxColor] = React.useState(quoteColors[bgNum]);\n  \n  //Inizializzo il testo e l'autore delle citazioni\n  let quoteNum = getRand(quotes);\n  const [quote, setQuote] = React.useState(quotes[quoteNum]);\n  \n  //Gestisco il click e cambio gli stati\n   const handleClick = () => { \n     setBgColor(bgColors[getRand(bgColors)]);\n     setquoteBoxColor(quoteColors[getRand(quoteColors)]);\n     setQuote(quotes[getRand(quotes)]);\n     }\n  \n  \n  return (\n    <div id=\"quote-box\" style={{backgroundColor: quoteBoxColor}} class=\"shadow-lg p-3 mb-5 bg-body rounded\">\n    <quote id=\"text\" >\n      \"{quote.text}\"\n    </quote>\n    <p id=\"author\"><br/>{quote.author}</p>\n   <a id=\"tweet-quote\" href=\"twitter.com/intent/tweet\" target=\"_blank\"><i class=\"fab fa-twitter\"></i>  </a><button id=\"new-quote\" type=\"button\" class=\"btn btn-light\" onClick={handleClick}>New quote</button>\n  </div>\n  )\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}